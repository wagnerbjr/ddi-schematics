import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { NovoActions } from '@core/novo/store/novo.actions';
import { NovoStore } from '@core/novo/store/novo.store';
import { NovoState } from '@core/novo/types/novo.state';
import { NovoListaDto } from '@core/novo/types/novo-lista.dto';
import { Toastr } from '@core/types/toastr.type';
import { ErrorHandlerUtil } from '@core/utils/error-handler.util';
import { PermissaoService } from '@ddi-ng/permissao';
import { TipoMensagemEnum } from 'app/shared/enums/tipe-mensagem.enum';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-novo',
  templateUrl: './lista-novo.component.html',
  styleUrls: ['./lista-novo.component.scss']
})
export class novoComponent {
  public toastrs: Toastr[] = [];
  public isPrinting: boolean = false;
  public novoDTO: novoDTO[] = [];
  public navigation: { text: string, onClick: Function }[] = [
    { text: 'InÃ­cio', onClick: () => this.goHome() },
    { text: 'Lista de Motivos de Cancelamento de Turma', onClick: () => null }
  ];

  private novoSubscription: Subscription = null;

  constructor(
    private router: Router,
    private novoActions: NovoActions,
    private novoStore: NovoStore,
    private permissaoService: PermissaoService,
  ) { }

  ngOnInit(): void {
    this.requestListanovo();
  }

  public goHome(): void {
    this.router.navigate(['/home']);
  }

  public handleToastr(toastr): void {
    this.exibeToastr(
      toastr.mensagem,
      toastr.status
    );
  }

  public clearToastr(...toastrToClear: any[]): void {
    this.toastrs = this.toastrs.filter((toastr: any) => {
      return !toastrToClear.includes(toastr);
    });
  }

  private exibeToastr(mensagem: string, status: TipoMensagemEnum): void {
    if (this.toastrs.find((toastr) => toastr.mensagem === mensagem)) {
      return;
    }
    this.toastrs.push({
      mensagem,
      status
    });

    window.scroll(0, 0);
    return;
  }

  private requestListanovo(): Promise<void> {
    return new Promise((resolve, reject) => {
      this.novoSubscription?.unsubscribe();
      this.Novo.listaTodos();

      this.novoSubscription = this.novoStore
        .state$
        .subscribe((data: novoState) => {
          if(data.Novo.hasErrors) {
            const rawMessage: string = data.Novo.errorMessage;

            this.exibeToastr(
              ErrorHandlerUtil.getMessage(rawMessage),
              ErrorHandlerUtil.getStatus(rawMessage)
            );

            this.novoSubscription?.unsubscribe();
            reject();
            return;
          }
          if(!data.Novo.isLoading) {
            this.novoDTO = data.Novo.data;

            this.novoSubscription?.unsubscribe();

            resolve();
          }
        });
    });
  }

  get isnovoLoading(): boolean {
    return (
      this.novoStore.state.Novo.isLoading
      && !this.novoSubscription?.closed
    );
  }

  get isLoading(): boolean {
    return (
      this.isnovoLoading
    );
  }

  get permissaoConsulta(): boolean {
    return this.permissaoService.validarPermissao("MOTCONCS", "EXECUTAR", "PRV");
  }
}
